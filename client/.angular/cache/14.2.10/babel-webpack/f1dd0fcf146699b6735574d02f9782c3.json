{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/josed/Escritorio/WebDev2/Fullstack-project-with-NESTJS-main/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport { isThisMonth } from 'date-fns';\nlet PaymentComponent = class PaymentComponent {\n  constructor(dataService, _activatedRoute, _location) {\n    this.dataService = dataService;\n    this._activatedRoute = _activatedRoute;\n    this._location = _location;\n    this.user = {};\n    this.upToDate = '';\n    this.currentMonth = new Date().getMonth() + 1;\n    this.randomNumberforInt = Math.floor(Math.random() * 100000) + 1;\n    this.payment = {\n      id: 0,\n      payDate: '',\n      customerId: 0\n    };\n\n    this._activatedRoute.params.subscribe(params => {\n      console.log(params['id']);\n      this.idToSearch = params['id'];\n    });\n\n    console.log(this.randomNumberforInt);\n  }\n\n  ngOnInit() {\n    this.getUser();\n  }\n\n  getUser() {\n    this.dataService.getOneUser(this.idToSearch).subscribe(res => {\n      this.user = res;\n    });\n    let aver = [];\n    this.dataService.getPayments().subscribe(resp => {\n      resp.forEach(respett => {\n        if (respett.customerId == this.idToSearch) {\n          aver.push(respett);\n        }\n      });\n      let arrayfortest = [];\n\n      for (let i = 0; i < aver.length; i++) {\n        let year = parseInt(aver[i].payDate.slice(-4));\n        let month = aver[i].payDate.match(/(?<=-)\\w+(?=-)/g)[0];\n        let monther = parseInt(month);\n        let result = isThisMonth(new Date(year, monther, 0));\n        arrayfortest.push(result);\n\n        if (arrayfortest.includes(true)) {\n          this.defaulter = false;\n          this.upToDate = 'Member up to date';\n        } else {\n          this.defaulter = true;\n          this.upToDate = 'Defaulter';\n        }\n      }\n    });\n  }\n\n  pay() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        value: month\n      } = yield Swal.fire({\n        title: 'Add payment for the month',\n        input: 'select',\n        inputOptions: {\n          1: 'January',\n          2: 'February',\n          3: 'March',\n          4: 'April',\n          5: 'May',\n          6: 'June',\n          7: 'July',\n          8: 'August',\n          9: 'September',\n          10: 'Octuber',\n          11: 'November',\n          12: 'December',\n          inputPlaceholder: 'Select a month'\n        },\n        confirmButtonText: 'Add payment',\n        confirmButtonColor: \"#000000\"\n      });\n\n      if (month) {\n        Swal.fire(`Payment registered`);\n        _this.frutier = month;\n        let datePaid = new Date().getDate() + \"-\" + _this.frutier + \"-\" + new Date().getFullYear();\n        let newObject = {\n          id: _this.randomNumberforInt,\n          payDate: datePaid,\n          customerId: _this.user.id\n        };\n        console.log(newObject);\n\n        _this.dataService.createPayment(newObject).subscribe(res => {\n          console.log(res);\n        });\n      }\n    })();\n  }\n\n  goBack() {\n    this._location.back();\n  }\n\n};\nPaymentComponent = __decorate([Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})], PaymentComponent);\nexport { PaymentComponent };","map":{"version":3,"mappings":"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","names":["Component","Swal","isThisMonth","PaymentComponent","constructor","dataService","_activatedRoute","_location","Date","getMonth","Math","floor","random","id","payDate","customerId","params","subscribe","console","log","idToSearch","randomNumberforInt","ngOnInit","getUser","getOneUser","res","user","aver","getPayments","resp","forEach","respett","push","arrayfortest","i","length","year","parseInt","slice","month","match","monther","result","includes","defaulter","upToDate","pay","value","fire","title","input","inputOptions","inputPlaceholder","confirmButtonText","confirmButtonColor","frutier","datePaid","getDate","getFullYear","newObject","createPayment","goBack","back","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\josed\\Escritorio\\WebDev2\\Fullstack-project-with-NESTJS-main\\client\\src\\app\\payment\\payment.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Location } from '@angular/common';\nimport Swal from 'sweetalert2';\nimport { PayInterface } from '../interfaces/payinterface';\nimport { format, isThisMonth, parseISO } from 'date-fns';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})\nexport class PaymentComponent implements OnInit {\n\n\n  user: any = {};\n  idToSearch: any;\n  payments: any;\n  defaulter: boolean;\n  upToDate = '';\n  currentMonth = new Date().getMonth() + 1;\n  frutier: any;\n  randomNumberforInt = Math.floor(Math.random() * 100000) + 1;\n  currentPayment: any;\n  payment: PayInterface = {\n    id: 0,\n    payDate: '',\n    customerId: 0\n  }\n\n  constructor(private dataService: DataService, private _activatedRoute: ActivatedRoute, private _location: Location) {\n    this._activatedRoute.params.subscribe(params => {\n      console.log(params['id']);\n      this.idToSearch = params['id'];\n    });\n    console.log(this.randomNumberforInt)\n  }\n\n  ngOnInit() {\n    this.getUser();\n  }\n\n  getUser() {\n    this.dataService.getOneUser(this.idToSearch).subscribe(res => {\n      this.user = res;\n    })\n\n    let aver: any[] = []\n\n    this.dataService.getPayments().subscribe(resp => {\n      resp.forEach(respett => {\n        if (respett.customerId == this.idToSearch) {\n          aver.push(respett)\n        }\n      })\n\n\n      let arrayfortest = []\n\n      for (let i = 0; i < aver.length; i++) {\n\n        let year = parseInt(aver[i].payDate.slice(-4));\n        let month = aver[i].payDate.match(/(?<=-)\\w+(?=-)/g)[0];\n        let monther = parseInt(month)\n\n        let result = isThisMonth(new Date(year, monther, 0))\n        arrayfortest.push(result)\n\n        if (arrayfortest.includes(true)) {\n          this.defaulter = false;\n          this.upToDate = 'Member up to date';\n        } else {\n          this.defaulter = true;\n          this.upToDate = 'Defaulter';\n        }\n\n      }\n\n    })\n\n\n  }\n\n  async pay() {\n    const { value: month } = await Swal.fire({\n      title: 'Add payment for the month',\n      input: 'select',\n      inputOptions: {\n        1: 'January',\n        2: 'February',\n        3: 'March',\n        4: 'April',\n        5: 'May',\n        6: 'June',\n        7: 'July',\n        8: 'August',\n        9: 'September',\n        10: 'Octuber',\n        11: 'November',\n        12: 'December',\n        inputPlaceholder: 'Select a month'\n      },\n      confirmButtonText: 'Add payment',\n      confirmButtonColor: \"#000000\",\n    })\n    if (month) {\n      Swal.fire(`Payment registered`)\n      this.frutier = month\n      let datePaid = new Date().getDate() + \"-\" + (this.frutier) + \"-\" + new Date().getFullYear();\n\n      let newObject = {\n        id: this.randomNumberforInt,\n        payDate: datePaid,\n        customerId: this.user.id\n      }\n      console.log(newObject)\n      this.dataService.createPayment(newObject).subscribe(res => {\n        console.log(res)\n      })\n\n    }\n  }\n\n\n  goBack() {\n    this._location.back();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}