{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/josed/Escritorio/WebDev2/Fullstack-project-with-NESTJS-main/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ActivatedRoute } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { isThisMonth } from 'date-fns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/button\";\n\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\n\nexport class PaymentComponent {\n  constructor(dataService, _activatedRoute, _location) {\n    this.dataService = dataService;\n    this._activatedRoute = _activatedRoute;\n    this._location = _location;\n    this.user = {};\n    this.upToDate = '';\n    this.currentMonth = new Date().getMonth() + 1;\n    this.randomNumberforInt = Math.floor(Math.random() * 100000) + 1;\n    this.payment = {\n      id: 0,\n      payDate: '',\n      customerId: 0\n    };\n\n    this._activatedRoute.params.subscribe(params => {\n      console.log(params['id']);\n      this.idToSearch = params['id'];\n    });\n\n    console.log(this.randomNumberforInt);\n  }\n\n  ngOnInit() {\n    this.getUser();\n  }\n\n  getUser() {\n    this.dataService.getOneUser(this.idToSearch).subscribe(res => {\n      this.user = res;\n    });\n    let aver = [];\n    this.dataService.getPayments().subscribe(resp => {\n      resp.forEach(respett => {\n        this.currentPayment = respett.payDate;\n\n        if (respett.customerId == this.idToSearch) {\n          aver.push(respett);\n        }\n      });\n      let arrayfortest = [];\n\n      for (let i = 0; i < aver.length; i++) {\n        let year = parseInt(aver[i].payDate.slice(-4));\n        let month = aver[i].payDate.match(/(?<=-)\\w+(?=-)/g)[0];\n        console.log(year);\n        let monther = parseInt(month);\n        let result = isThisMonth(new Date(year, monther, 0));\n        arrayfortest.push(result);\n        console.log(monther);\n        console.log(result);\n\n        if (arrayfortest.includes(true)) {\n          this.defaulter = false;\n          this.upToDate = 'Member up to date';\n        } else {\n          this.defaulter = true;\n          this.upToDate = 'Defaulter';\n        }\n      }\n    });\n  }\n\n  pay() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        value: month\n      } = yield Swal.fire({\n        title: 'Add payment for the month',\n        input: 'select',\n        inputOptions: {\n          1: 'January',\n          2: 'February',\n          3: 'March',\n          4: 'April',\n          5: 'May',\n          6: 'June',\n          7: 'July',\n          8: 'August',\n          9: 'September',\n          10: 'Octuber',\n          11: 'November',\n          12: 'December',\n          inputPlaceholder: 'Select a month'\n        },\n        confirmButtonText: 'Add payment',\n        confirmButtonColor: \"#000000\"\n      });\n\n      if (month) {\n        Swal.fire(`Payment registered`);\n        _this.frutier = month; // let date = new Date();\n\n        let datePaid = new Date().getDate() + \"-\" + _this.frutier + \"-\" + new Date().getFullYear();\n        let newObject = {\n          id: _this.randomNumberforInt,\n          payDate: datePaid,\n          customerId: _this.user.id\n        };\n        console.log(newObject);\n\n        _this.dataService.createPayment(newObject).subscribe(res => {\n          console.log(res);\n        });\n      }\n    })();\n  }\n\n  goBack() {\n    this._location.back();\n  }\n\n}\n\nPaymentComponent.ɵfac = function PaymentComponent_Factory(t) {\n  return new (t || PaymentComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Location));\n};\n\nPaymentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PaymentComponent,\n  selectors: [[\"app-payment\"]],\n  decls: 27,\n  vars: 12,\n  consts: [[\"id\", \"mat-card-header-title\"], [3, \"ngStyle\"], [1, \"mt-2\", \"d-flex\", \"justify-content-around\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function PaymentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\")(2, \"mat-card-title\", 0);\n      i0.ɵɵtext(3, \"Add payment\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\")(5, \"p\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵtext(8);\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵtext(10);\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelement(13, \"br\");\n      i0.ɵɵtext(14);\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵtext(16);\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵtext(18);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"div\", 1);\n      i0.ɵɵtext(21);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\", 2)(23, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function PaymentComponent_Template_button_click_23_listener() {\n        return ctx.goBack();\n      });\n      i0.ɵɵtext(24, \" Go back \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function PaymentComponent_Template_button_click_25_listener() {\n        return ctx.pay();\n      });\n      i0.ɵɵtext(26, \" Pay \");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"ID \", ctx.user.id, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.user.affiliateType, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate2(\" \", ctx.user.firstName, \" \", ctx.user.lastName, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" DNI \", ctx.user.dni, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" EMAIL \", ctx.user.emailAdress, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" PHONE NUMBER \", ctx.user.phoneNumber, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" START DATE \", ctx.user.startDate, \" \");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(10, _c0, ctx.defaulter == true ? \"red\" : \"green\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.upToDate);\n    }\n  },\n  dependencies: [i3.NgStyle, i4.MatCard, i4.MatCardHeader, i4.MatCardTitle, i5.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXltZW50LmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ActivatedRoute","Swal","isThisMonth","PaymentComponent","constructor","dataService","_activatedRoute","_location","Date","getMonth","Math","floor","random","id","payDate","customerId","params","subscribe","console","log","idToSearch","randomNumberforInt","ngOnInit","getUser","getOneUser","res","user","aver","getPayments","resp","forEach","respett","currentPayment","push","arrayfortest","i","length","year","parseInt","slice","month","match","monther","result","includes","defaulter","upToDate","pay","value","fire","title","input","inputOptions","inputPlaceholder","confirmButtonText","confirmButtonColor","frutier","datePaid","getDate","getFullYear","newObject","createPayment","goBack","back","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\josed\\Escritorio\\WebDev2\\Fullstack-project-with-NESTJS-main\\client\\src\\app\\payment\\payment.component.ts","C:\\Users\\josed\\Escritorio\\WebDev2\\Fullstack-project-with-NESTJS-main\\client\\src\\app\\payment\\payment.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../services/data.service';\nimport { Location } from '@angular/common';\nimport Swal from 'sweetalert2';\nimport { PayInterface } from '../interfaces/payinterface';\nimport { format, isThisMonth, parseISO } from 'date-fns';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})\nexport class PaymentComponent implements OnInit {\n\n\n  user: any = {};\n  idToSearch: any;\n  payments: any;\n  defaulter: boolean;\n  upToDate = '';\n  currentMonth = new Date().getMonth() + 1;\n  frutier: any;\n  randomNumberforInt = Math.floor(Math.random() * 100000) + 1;\n  currentPayment: any;\n  payment: PayInterface = {\n    id: 0,\n    payDate: '',\n   customerId: 0\n  }\n\n  constructor(private dataService: DataService, private _activatedRoute: ActivatedRoute, private _location: Location) {\n    this._activatedRoute.params.subscribe(params => {\n      console.log(params['id']);\n      this.idToSearch = params['id'];\n    });\n    console.log(this.randomNumberforInt)\n  }\n\n  ngOnInit() {\n    this.getUser();\n  }\n\n  getUser() {\n    this.dataService.getOneUser(this.idToSearch).subscribe(res => {\n      this.user = res;\n    })\n\n    let aver: any[] = []\n\n    this.dataService.getPayments().subscribe(resp => {\n      resp.forEach(respett => {\n        this.currentPayment = respett.payDate\n        if (respett.customerId == this.idToSearch) {\n          aver.push(respett)\n         }\n      })\n\n\n    let arrayfortest = []\n\n    for(let i = 0; i<aver.length;i++){\n\n      let year = parseInt(aver[i].payDate.slice(-4));\n      let month = aver[i].payDate.match(/(?<=-)\\w+(?=-)/g)[0];\n      console.log(year)\n\n      let monther = parseInt(month)\n      let result = isThisMonth(new Date(year, monther, 0))\n      arrayfortest.push(result)\n      console.log(monther)\n      console.log(result)\n\n      if(arrayfortest.includes(true)){\n        this.defaulter = false;\n        this.upToDate = 'Member up to date';\n      } else{\n        this.defaulter = true;\n        this.upToDate = 'Defaulter';\n      }\n\n    }\n\n\n    })\n\n\n  }\n\n  async pay() { \n    const { value: month } = await Swal.fire({\n      title: 'Add payment for the month',\n      input: 'select',\n      inputOptions: {\n          1: 'January',\n          2: 'February',\n          3: 'March',\n          4: 'April',\n          5: 'May',\n          6: 'June',\n          7: 'July',\n          8: 'August',\n          9: 'September',\n          10: 'Octuber',\n          11: 'November',\n          12: 'December',\n      inputPlaceholder: 'Select a month'\n    },\n    confirmButtonText: 'Add payment',\n    confirmButtonColor: \"#000000\",})\n    if (month) {\n      Swal.fire(`Payment registered`)\n      this.frutier = month\n      // let date = new Date();\n      let datePaid = new Date().getDate() + \"-\" + (this.frutier) + \"-\" + new Date().getFullYear();\n\n      let newObject = {\n        id: this.randomNumberforInt,\n        payDate: datePaid,\n        customerId: this.user.id\n      }\n      console.log(newObject)\n      this.dataService.createPayment(newObject).subscribe(res=>{\n        console.log(res)\n      })\n    \n    }\n  }\n\n\n  goBack() {\n    this._location.back();\n  }\n\n}\n","<mat-card>\n    <mat-card-header>\n      <mat-card-title id=\"mat-card-header-title\">Add payment</mat-card-title>\n    </mat-card-header>\n    <div>\n       <p>ID  {{user.id}}\n       <br>\n        {{user.affiliateType}}\n        <br>\n        {{user.firstName}} {{user.lastName}}  \n        <br>\n        DNI {{user.dni}}\n        <br>\n        EMAIL {{user.emailAdress}}\n        <br>\n        PHONE NUMBER {{user.phoneNumber}}\n        <br>\n        START DATE {{user.startDate}}\n        </p>\n        <br>\n        <div [ngStyle]=\"{'color' : defaulter == true ? 'red' : 'green'}\">{{upToDate}}</div>\n\n    </div>\n\n</mat-card>\n\n<div class=\"mt-2   d-flex justify-content-around \">\n\n    <button mat-raised-button (click)=\"goBack();\" > Go back   </button>\n    \n    <button mat-raised-button (click)=\"pay();\" > Pay  </button>\n\n\n</div>  \n"]},"metadata":{},"sourceType":"module"}