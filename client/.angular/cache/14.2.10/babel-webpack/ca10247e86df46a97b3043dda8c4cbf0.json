{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport Swal from 'sweetalert2';\nimport { BehaviorSubject } from 'rxjs';\nimport { isThisMonth } from 'date-fns';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/data.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/forms\";\n\nfunction HomeComponent_mat_card_0_mat_card_content_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card-content\")(1, \"form\", 2, 3);\n    i0.ɵɵlistener(\"ngSubmit\", function HomeComponent_mat_card_0_mat_card_content_4_Template_form_ngSubmit_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n\n      const _r2 = i0.ɵɵreference(2);\n\n      return i0.ɵɵresetView(_r2.resetForm());\n    });\n    i0.ɵɵelementStart(3, \"mat-form-field\", 4)(4, \"input\", 5);\n    i0.ɵɵlistener(\"ngModelChange\", function HomeComponent_mat_card_0_mat_card_content_4_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.idForSearch = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function HomeComponent_mat_card_0_mat_card_content_4_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.searchUser(ctx_r6.idForSearch));\n    });\n    i0.ɵɵtext(6, \" Search for contact \");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.idForSearch);\n  }\n}\n\nfunction HomeComponent_mat_card_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-header\")(2, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function HomeComponent_mat_card_0_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onClickAddPayment());\n    });\n    i0.ɵɵtext(3, \" Add payment \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, HomeComponent_mat_card_0_mat_card_content_4_Template, 7, 1, \"mat-card-content\", 0);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.addPaymentModeActivated == true);\n  }\n}\n\nexport class HomeComponent {\n  constructor(dataService, router) {\n    this.dataService = dataService;\n    this.router = router;\n    this.addPaymentModeActivated = false;\n    this.upToDate = '';\n    this.payments = {\n      id: 0,\n      payDate: '',\n      customerId: 0,\n      firstName: '',\n      lastName: ''\n    };\n    this.date = new Date();\n    this.currentDate = this.date.getDate() + \"-\" + (this.date.getMonth() + 1) + \"-\" + this.date.getFullYear();\n    this.currentMonth = this.date.getMonth() + 1;\n    this.nextMonth = this.date.getMonth() + 2;\n    this._isBoolean$ = new BehaviorSubject(true);\n    this.displayedColumns = ['id', 'firstName', 'lastName', 'dni', 'affiliateType', 'startDate', 'phoneNumber'];\n    this.dataSource = new MatTableDataSource();\n  }\n\n  ngOnInit() {\n    this.dataService.approvalStageMessage.subscribe(msg => {\n      console.log(msg);\n\n      if (msg == true) {\n        this._isBoolean$.next(true);\n      } else {\n        this._isBoolean$.next(false);\n      }\n    });\n  }\n\n  onClickAddPayment() {\n    if (this.addPaymentModeActivated == false) {\n      this.addPaymentModeActivated = true;\n    } else {\n      this.addPaymentModeActivated = false;\n    }\n  }\n\n  searchUser(id) {\n    let testArray = [];\n    this.dataService.getUsers().subscribe(resp => {\n      resp.forEach(resp2 => {\n        if (resp2.dni == id) {\n          this.idForSearch = resp2.id;\n          this.dataService.getOneUser(resp2.id).subscribe(resp => {\n            let objectted2 = JSON.stringify(resp);\n            let objected = JSON.parse(objectted2);\n            this.usersToShow = objected;\n            this.dataService.getPayments().subscribe(resp => {\n              resp.forEach(respett => {\n                if (respett.customerId == this.usersToShow.id) {\n                  let payments3 = {\n                    id: respett.id,\n                    payDate: respett.payDate,\n                    customerId: respett.customerId,\n                    firstName: respett.firstName,\n                    lastName: respett.lastName\n                  };\n                  this.payments = payments3;\n                  let getMonthPaidReady = parseInt(respett.payDate.substring(this.payments.payDate.indexOf(\"-\") + 1).slice(0, -5));\n                  let year = parseInt(respett.payDate.slice(-4));\n                  let result = isThisMonth(new Date(year, getMonthPaidReady, 0));\n                  testArray.push(result);\n                  let replacer = this.nextMonth.toString();\n                  this.nextPayDate = this.payments.payDate.replace(getMonthPaidReady.toString(), replacer);\n\n                  if (testArray.includes(true)) {\n                    this.upToDate = \"<h1 style='color:green'>\" + 'Up to date' + \"</h1>\";\n                  } else if (this.currentMonth > getMonthPaidReady) {\n                    this.upToDate = \"<h1 style='color:red'>\" + 'Defaulter' + \"</h1>\";\n                  }\n                }\n\n                Swal.fire({\n                  title: this.usersToShow.firstName + ' ' + this.usersToShow.lastName,\n                  html: this.usersToShow.affiliateType + ` <br> Last pay date:   ${this.payments.payDate} <br>` + this.upToDate + ` <br> Next pay date:   ${this.nextPayDate} <br>`,\n                  confirmButtonText: 'Add payment',\n                  confirmButtonColor: \"#000000\"\n                }).then(result => {\n                  if (result.value === true) {\n                    this.router.navigateByUrl(`/addpayment/${this.idForSearch}`);\n                    this.onClickAddPayment();\n                  }\n                });\n              });\n            });\n          });\n        }\n      });\n    });\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"mat-raised-button\", \"\", 1, \"addPaymentButton\", 3, \"click\"], [1, \"mat-elevation-z8\", 2, \"width\", \"100%\", \"padding\", \"5px\", 3, \"ngSubmit\"], [\"f\", \"ngForm\"], [\"id\", \"dniInput\"], [\"matInput\", \"\", \"placeholder\", \"DNI\", \"name\", \"dni\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HomeComponent_mat_card_0_Template, 5, 1, \"mat-card\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx._isBoolean$));\n    }\n  },\n  dependencies: [i3.NgIf, i4.MatCard, i4.MatCardHeader, i4.MatCardContent, i5.MatFormField, i6.MatInput, i7.MatButton, i8.ɵNgNoValidate, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgControlStatusGroup, i8.RequiredValidator, i8.NgModel, i8.NgForm, i3.AsyncPipe],\n  styles: [\"form[_ngcontent-%COMP%]    > button[_ngcontent-%COMP%]{\\n    background-color: rgb(0, 0, 0);\\n    color: white;\\n    margin-right: 4px;\\n}\\n\\n.addPaymentButton[_ngcontent-%COMP%]{\\n    width: 150px;\\n\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLDhCQUE4QjtJQUM5QixZQUFZO0lBQ1osaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksWUFBWTs7QUFFaEIiLCJmaWxlIjoiaG9tZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZm9ybSA+IGJ1dHRvbntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwgMCwgMCk7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIG1hcmdpbi1yaWdodDogNHB4O1xufVxuXG4uYWRkUGF5bWVudEJ1dHRvbntcbiAgICB3aWR0aDogMTUwcHg7XG5cbn0iXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["MatTableDataSource","Swal","BehaviorSubject","isThisMonth","i0","HomeComponent","constructor","dataService","router","id","payDate","customerId","firstName","lastName","Date","date","getDate","getMonth","getFullYear","ngOnInit","approvalStageMessage","subscribe","msg","console","log","_isBoolean$","next","onClickAddPayment","addPaymentModeActivated","searchUser","testArray","getUsers","resp","forEach","resp2","dni","idForSearch","getOneUser","objectted2","JSON","stringify","objected","parse","usersToShow","getPayments","respett","payments3","payments","getMonthPaidReady","parseInt","substring","indexOf","slice","year","result","push","replacer","nextMonth","toString","nextPayDate","replace","includes","upToDate","currentMonth","fire","title","html","affiliateType","confirmButtonText","confirmButtonColor","then","value","navigateByUrl","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\josed\\Escritorio\\WebDev2\\Fullstack-project-with-NESTJS-main\\client\\src\\app\\home\\home.component.ts","C:\\Users\\josed\\Escritorio\\WebDev2\\Fullstack-project-with-NESTJS-main\\client\\src\\app\\home\\home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, NgForm } from '@angular/forms';\nimport { User } from '../interfaces/usersinterface';\nimport { DataService } from '../services/data.service';\nimport { Router } from '@angular/router';\nimport { PaymentInterface } from '../interfaces/paymentsinterface';\nimport { MatTableDataSource } from '@angular/material/table';\nimport Swal from 'sweetalert2';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { isThisMonth } from 'date-fns';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  hide: Observable<boolean>;\n  usersToShow: any;\n  addPaymentModeActivated = false;\n  upToDate = '';\n\n  payments: PaymentInterface = {\n    id: 0,\n    payDate: '',\n    customerId: 0,\n    firstName: '',\n    lastName: ''\n  }\n\n  idForSearch: number;\n\n  date = new Date();\n  currentDate = this.date.getDate() + \"-\" + (this.date.getMonth() + 1) + \"-\" + this.date.getFullYear();\n  currentMonth = this.date.getMonth() + 1\n  nextMonth = this.date.getMonth() + 2\n  nextPayDate:any\n\n  _isBoolean$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\n  displayedColumns = ['id', 'firstName', 'lastName', 'dni', 'affiliateType', 'startDate', 'phoneNumber'];\n\n  public dataSource = new MatTableDataSource<any[]>();\n\n  constructor(private dataService: DataService, private router: Router) { }\n\n  ngOnInit() {\n    this.dataService.approvalStageMessage.subscribe(msg => {\n      console.log(msg)\n      if(msg == true){\n        this._isBoolean$.next(true)\n      } else {\n        this._isBoolean$.next(false)\n      }\n    })\n  }\n\n\n  onClickAddPayment() {\n    if (this.addPaymentModeActivated == false) {\n      this.addPaymentModeActivated = true;\n    } else {\n      this.addPaymentModeActivated = false;\n    }\n  }\n\n  searchUser(id: number) {\n\n    let testArray: boolean[] = []\n\n    this.dataService.getUsers().subscribe((resp) => {\n      resp.forEach(resp2 => {\n        if (resp2.dni == id) {\n          this.idForSearch = resp2.id\n          this.dataService.getOneUser(resp2.id).subscribe((resp) => {\n            let objectted2 = JSON.stringify(resp)\n            let objected = JSON.parse(objectted2)\n            this.usersToShow = objected;\n            this.dataService.getPayments().subscribe(resp => {\n              resp.forEach(respett => {\n                if (respett.customerId == this.usersToShow.id) {\n                  let payments3 = {\n                    id: respett.id,\n                    payDate: respett.payDate,\n                    customerId: respett.customerId,\n                    firstName: respett.firstName,\n                    lastName: respett.lastName\n                  }\n\n                  this.payments = payments3\n                  let getMonthPaidReady = parseInt(respett.payDate.substring(this.payments.payDate.indexOf(\"-\") + 1).slice(0, -5))\n                  let year = parseInt(respett.payDate.slice(-4));\n\n                  let result = isThisMonth(new Date(year, getMonthPaidReady, 0))\n                  testArray.push(result)\n\n                  let replacer = this.nextMonth.toString()\n                  this.nextPayDate = this.payments.payDate.replace(getMonthPaidReady.toString(), replacer)\n                  if (testArray.includes(true)) {\n                    this.upToDate = \"<h1 style='color:green'>\" + 'Up to date' + \"</h1>\"\n                  } else if (this.currentMonth > getMonthPaidReady) {\n                    this.upToDate = \"<h1 style='color:red'>\" + 'Defaulter' + \"</h1>\"\n                  }\n                }\n\n                Swal.fire({\n                  title: this.usersToShow.firstName + ' ' + this.usersToShow.lastName,\n                  html: this.usersToShow.affiliateType + ` <br> Last pay date:   ${this.payments.payDate} <br>` + this.upToDate +\n                        ` <br> Next pay date:   ${this.nextPayDate} <br>`,\n                  confirmButtonText: 'Add payment',\n                  confirmButtonColor: \"#000000\",\n                }).then((result) => {\n                  if (result.value === true) {\n                    this.router.navigateByUrl(`/addpayment/${this.idForSearch}`);\n                    this.onClickAddPayment();\n                  }\n                })\n              })\n            })\n          })\n        }\n      })\n    })\n  }\n\n\n}\n","<mat-card *ngIf=\"_isBoolean$ | async\" >\n    <mat-card-header >\n    <button class=\"addPaymentButton\" mat-raised-button (click)=\"onClickAddPayment()\"    > Add payment    </button>\n    </mat-card-header >\n    <mat-card-content *ngIf=\"addPaymentModeActivated == true;\">\n      <form #f =\"ngForm\" (ngSubmit)=\" f.resetForm()\" class=\"mat-elevation-z8\" style=\"width: 100%; padding: 5px;\">\n      \n              <mat-form-field id=\"dniInput\">\n                <input matInput  placeholder=\"DNI\" name=\"dni\"  [(ngModel)] = \"idForSearch\" required>\n              </mat-form-field> \n            \n              <button mat-raised-button (click)=\"searchUser(idForSearch);\"    > Search for contact   </button>\n  \n        </form> \n    </mat-card-content>\n\n</mat-card>\n\n\n\n"]},"metadata":{},"sourceType":"module"}